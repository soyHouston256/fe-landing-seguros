---
import Form from "./header/Form.astro";

// Hero.astro - Sección principal con formulario funcional
---

<section class="py-16 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto px-8">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
            <div class="space-y-8">
                <div class="relative">
                    <div class="relative z-10 max-w-xl">
                        <img
                            src="/family-image.jpg"
                            alt="Familia feliz"
                            class="w-full h-auto rounded-2xl shadow-2xl"
                        />
                    </div>
                </div>
                <div>
                    <h1
                        class="text-4xl md:text-4xl lg:text-5xl font-bold text-gray-800 leading-tight text-balance"
                    >
                        Protege tu salud y la<br />
                        <span class="text-pacifico-blue"
                            >de los que más quieres</span
                        >
                    </h1>
                </div>
            </div>
            <Form />
        </div>
    </div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("leadForm") as HTMLFormElement;
        const submitBtn = document.getElementById(
            "submitBtn",
        ) as HTMLButtonElement;
        const btnText = submitBtn.querySelector(".btn-text") as HTMLElement;
        const btnLoading = submitBtn.querySelector(
            ".btn-loading",
        ) as HTMLElement;
        const formMessage = document.getElementById(
            "formMessage",
        ) as HTMLElement;

        // Función para mostrar mensajes
        function showMessage(message: string, type: "success" | "error") {
            formMessage.className = `p-4 rounded-lg text-sm font-medium ${
                type === "success"
                    ? "bg-green-100 text-green-800 border border-green-200"
                    : "bg-red-100 text-red-800 border border-red-200"
            }`;
            formMessage.textContent = message;
            formMessage.classList.remove("hidden");

            // Auto-hide después de 5 segundos
            setTimeout(() => {
                formMessage.classList.add("hidden");
            }, 5000);
        }

        // Función para toggle loading state
        function setLoading(loading: boolean) {
            submitBtn.disabled = loading;

            if (loading) {
                btnText.classList.add("hidden");
                btnLoading.classList.remove("hidden");
            } else {
                btnText.classList.remove("hidden");
                btnLoading.classList.add("hidden");
            }
        }

        // Validaciones en tiempo real
        const inputs = form.querySelectorAll(
            "input[required], select[required]",
        );
        inputs.forEach((input) => {
            input.addEventListener("blur", function () {
                validateField(input as HTMLInputElement);
            });
        });

        function validateField(field: HTMLInputElement) {
            const value = field.value.trim();
            let isValid = true;
            let errorMessage = "";

            // Validaciones específicas
            switch (field.name) {
                case "email":
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (value && !emailRegex.test(value)) {
                        isValid = false;
                        errorMessage = "Formato de email inválido";
                    }
                    break;
                case "documentNumber":
                    if (value && value.length < 8) {
                        isValid = false;
                        errorMessage = "Debe tener al menos 8 dígitos";
                    }
                    break;
                case "phone":
                    if (value && value.length < 9) {
                        isValid = false;
                        errorMessage = "Debe tener al menos 9 dígitos";
                    }
                    break;
            }

            // Aplicar estilos de validación
            if (!isValid) {
                field.classList.add("border-red-500", "focus:ring-red-500");
                field.classList.remove(
                    "border-gray-200",
                    "focus:ring-pacifico-blue",
                );
            } else {
                field.classList.remove("border-red-500", "focus:ring-red-500");
                field.classList.add(
                    "border-gray-200",
                    "focus:ring-pacifico-blue",
                );
            }

            return isValid;
        }

        // Manejar envío del formulario
        form.addEventListener("submit", async function (e) {
            e.preventDefault();

            // Validar todos los campos
            let allValid = true;
            inputs.forEach((input) => {
                if (!validateField(input as HTMLInputElement)) {
                    allValid = false;
                }
            });

            if (!allValid) {
                showMessage(
                    "Por favor corrige los errores en el formulario",
                    "error",
                );
                return;
            }

            setLoading(true);
            formMessage.classList.add("hidden");

            try {
                // Recopilar datos del formulario
                const formData = new FormData(form);
                const leadData = {
                    name: formData.get("name") as string,
                    lastname: formData.get("lastname") as string,
                    documentType: formData.get("documentType") as string,
                    documentNumber: formData.get("documentNumber") as string,
                    phone: formData.get("phone") as string,
                    email: formData.get("email") as string,
                };

                // Enviar a la API
                const response = await fetch("http://localhost:3000/api/lead", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(leadData),
                });

                const result = await response.json();

                if (result.success) {
                    showMessage(
                        "¡Gracias! Hemos recibido tu información. Un asesor se contactará contigo pronto.",
                        "success",
                    );
                    form.reset();

                    // Analytics o tracking
                    console.log("Lead enviado exitosamente:", result.leadId);
                } else {
                    showMessage(
                        result.error ||
                            "Hubo un error al enviar tu información. Intenta nuevamente.",
                        "error",
                    );
                }
            } catch (error) {
                console.error("Error enviando formulario:", error);
                showMessage(
                    "Error de conexión. Por favor verifica tu internet e intenta nuevamente.",
                    "error",
                );
            } finally {
                setLoading(false);
            }
        });
    });
</script>
