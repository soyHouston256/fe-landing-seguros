---
import Form from "./header/Form.astro";

// Hero.astro - Sección principal con formulario funcional
---

<section class="py-16 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto px-8">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
            <div class="space-y-8">
                <div class="relative">
                    <div class="relative z-10 max-w-xl">
                        <img
                            src="/family-image.jpg"
                            alt="Familia feliz"
                            class="w-full h-auto rounded-2xl shadow-2xl"
                        />
                    </div>
                </div>
                <div>
                    <h1
                        class="text-4xl md:text-4xl lg:text-5xl font-bold text-gray-800 leading-tight text-balance"
                    >
                        Protege tu salud y la<br />
                        <span class="text-pacifico-blue"
                            >de los que más quieres</span
                        >
                    </h1>
                </div>
            </div>
            <Form />
        </div>
    </div>
</section>

<script>
    declare const grecaptcha: any;
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("leadForm") as HTMLFormElement;
        if (!form) return;

        let recaptchaToken: string | null = null;

        form.addEventListener('recaptcha-token', (event) => {
            const customEvent = event as CustomEvent;
            recaptchaToken = customEvent.detail;
            console.log('Token de reCAPTCHA recibido en Hero.astro:', recaptchaToken);
        });

        const submitBtn = document.getElementById(
            "submitBtn",
        ) as HTMLButtonElement;
        const btnText = submitBtn ? submitBtn.querySelector(".btn-text") : null;
        const btnLoading = submitBtn ? submitBtn.querySelector(".btn-loading") : null;
        const formMessage = document.getElementById(
            "formMessage",
        );
        let isSubmitting = false;

        async function validateRecaptcha(token: string) {
            try {
                const response = await fetch("http://localhost:1323/validate-recaptcha", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ token: token })
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        console.warn('Servicio de reCAPTCHA no disponible (401), continuando con envío...');
                        return { success: true };
                    }
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                return result;
            } catch (error: any) {
                console.error("Error validando reCAPTCHA:", error);
                // Si es un error de red o servicio no disponible, permitir continuar
                if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                    console.warn('Servicio de reCAPTCHA no disponible, continuando con envío...');
                    return { success: true };
                }
                return { success: false, error: error.message };
            }
        }

        function showMessage(message: string, type: "error" | "success" = "error") {
            if (!formMessage) return;
            formMessage.textContent = message;
            formMessage.className = `p-4 rounded-lg text-sm font-medium ${
                type === "success" 
                    ? "bg-green-100 text-green-800 border border-green-200" 
                    : "bg-red-100 text-red-800 border border-red-200"
            }`;
            formMessage.classList.remove("hidden");
        }

        function hideMessage() {
            if (!formMessage) return;
            formMessage.classList.add("hidden");
        }

        function setLoadingState(loading: boolean) {
            if (!submitBtn || !btnText || !btnLoading) return;

            if (loading) {
                submitBtn.disabled = true;
                btnText.classList.add("hidden");
                btnLoading.classList.remove("hidden");
            } else {
                submitBtn.disabled = false;
                btnText.classList.remove("hidden");
                btnLoading.classList.add("hidden");
            }
        }

        form.addEventListener("submit", async function(e: SubmitEvent) {
            e.preventDefault();
            
            if (isSubmitting) return;
            isSubmitting = true;
            
            hideMessage();
            setLoadingState(true);

            try {
                // Para reCAPTCHA v3, ejecutar automáticamente
                if (!recaptchaToken) {
                    grecaptcha.ready(function() {
                        grecaptcha.execute('6LeR6GkrAAAAALrDFM9eIarEAbeQSpsDePoLDcLw', {action: 'submit'})
                        .then(function(token: string) {
                            recaptchaToken = token;
                            console.log("reCAPTCHA token generado:", token);
                            processFormSubmission();
                        });
                    });
                    return;
                }

                await processFormSubmission();

            } catch (error: any) {
                
                if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                    showMessage("Error de conexión. Verifica tu internet e intenta nuevamente.");
                } else {
                    showMessage(error.message || "Error al procesar tu solicitud. Por favor, intenta nuevamente.");
                }
            } finally {
                setLoadingState(false);
                isSubmitting = false;
            }
        });

        async function processFormSubmission() {
            if (!recaptchaToken) {
                showMessage("Error en la verificación de seguridad. Por favor, intenta nuevamente.");
                setLoadingState(false);
                isSubmitting = false;
                return;
            }

            const recaptchaValidation = await validateRecaptcha(recaptchaToken);
            
            if (!recaptchaValidation.success) {
                showMessage("Error en la verificación de seguridad. Por favor, intenta nuevamente.");
                setLoadingState(false);
                isSubmitting = false;
                return;
            }

            const formData = new FormData(form);
            const leadData = {
                name: formData.get("name"),
                lastname: formData.get("lastname"),
                documentType: formData.get("documentType"),
                documentNumber: formData.get("documentNumber"),
                phone: formData.get("phone"),
                email: formData.get("email"),
                terms: formData.get("terms") === "on"
            };

            const response = await fetch("http://localhost:3000/api/lead", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(leadData)
            });

            if (!response.ok) {
                if (response.status === 401) {
                    throw new Error("Servicio de leads no disponible. Por favor, intenta más tarde.");
                }
                throw new Error(`Error del servidor: ${response.status}`);
            }

            const result = await response.json();
            
            if (result.success) {
                showMessage("¡Gracias! Hemos recibido tu solicitud. Un asesor te contactará pronto.", "success");
                form.reset();
                recaptchaToken = null;
            } else {
                showMessage(result.message || "Error al enviar la solicitud. Por favor, intenta nuevamente.");
            }
        }

        window.addEventListener("load", function() {
            recaptchaToken = null;
        });
    });
</script>
